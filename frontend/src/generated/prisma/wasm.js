
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  user_id: 'user_id',
  name: 'name',
  email: 'email',
  password_hash: 'password_hash',
  phone: 'phone',
  created_at: 'created_at'
};

exports.Prisma.RoleScalarFieldEnum = {
  role_id: 'role_id',
  role_name: 'role_name'
};

exports.Prisma.UserRoleScalarFieldEnum = {
  user_id: 'user_id',
  role_id: 'role_id'
};

exports.Prisma.CompanyScalarFieldEnum = {
  company_id: 'company_id',
  name: 'name',
  website: 'website',
  created_at: 'created_at'
};

exports.Prisma.JobPostingScalarFieldEnum = {
  job_id: 'job_id',
  company_id: 'company_id',
  title: 'title',
  description: 'description',
  location: 'location',
  posted_at: 'posted_at'
};

exports.Prisma.SkillScalarFieldEnum = {
  skill_id: 'skill_id',
  skill_name: 'skill_name'
};

exports.Prisma.JobRequirementScalarFieldEnum = {
  req_id: 'req_id',
  job_id: 'job_id',
  skill_id: 'skill_id',
  required_level: 'required_level'
};

exports.Prisma.CandidateProfileScalarFieldEnum = {
  candidate_id: 'candidate_id',
  education: 'education',
  experience: 'experience'
};

exports.Prisma.ResumeScalarFieldEnum = {
  resume_id: 'resume_id',
  candidate_id: 'candidate_id',
  file_path: 'file_path',
  parsed_text: 'parsed_text',
  parsed_json: 'parsed_json',
  uploaded_at: 'uploaded_at'
};

exports.Prisma.ParsedResumeSkillScalarFieldEnum = {
  resume_id: 'resume_id',
  skill_id: 'skill_id'
};

exports.Prisma.ResumeVsJdMatchScalarFieldEnum = {
  match_id: 'match_id',
  resume_id: 'resume_id',
  job_id: 'job_id',
  match_score: 'match_score',
  matched_skills: 'matched_skills',
  missing_skills: 'missing_skills'
};

exports.Prisma.AiInterviewScalarFieldEnum = {
  interview_id: 'interview_id',
  job_id: 'job_id',
  candidate_id: 'candidate_id',
  scheduled_at: 'scheduled_at',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.AiInterviewQuestionScalarFieldEnum = {
  question_id: 'question_id',
  interview_id: 'interview_id',
  question_text: 'question_text',
  question_type: 'question_type',
  ai_generated: 'ai_generated',
  asked_at: 'asked_at'
};

exports.Prisma.AiInterviewResponseScalarFieldEnum = {
  response_id: 'response_id',
  interview_id: 'interview_id',
  question_id: 'question_id',
  response_text: 'response_text',
  response_audio_path: 'response_audio_path',
  response_video_path: 'response_video_path',
  transcript: 'transcript',
  captured_at: 'captured_at'
};

exports.Prisma.AiInterviewCheatingEventScalarFieldEnum = {
  event_id: 'event_id',
  interview_id: 'interview_id',
  event_type: 'event_type',
  confidence_score: 'confidence_score',
  detected_at: 'detected_at'
};

exports.Prisma.AiInterviewPostureDataScalarFieldEnum = {
  posture_id: 'posture_id',
  interview_id: 'interview_id',
  timestamp: 'timestamp',
  posture_data: 'posture_data'
};

exports.Prisma.AiVoicePromptScalarFieldEnum = {
  prompt_id: 'prompt_id',
  interview_id: 'interview_id',
  prompt_text: 'prompt_text',
  prompt_audio_path: 'prompt_audio_path'
};

exports.Prisma.AiInterviewAnalysisScalarFieldEnum = {
  analysis_id: 'analysis_id',
  interview_id: 'interview_id',
  technical_score: 'technical_score',
  communication_score: 'communication_score',
  confidence_score: 'confidence_score',
  overall_score: 'overall_score',
  strengths: 'strengths',
  weaknesses: 'weaknesses',
  improvement_suggestions: 'improvement_suggestions',
  analysis_json: 'analysis_json'
};

exports.Prisma.AiGenerationLogScalarFieldEnum = {
  log_id: 'log_id',
  user_id: 'user_id',
  service_used: 'service_used',
  request_payload: 'request_payload',
  response_payload: 'response_payload',
  created_at: 'created_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};


exports.Prisma.ModelName = {
  User: 'User',
  Role: 'Role',
  UserRole: 'UserRole',
  Company: 'Company',
  JobPosting: 'JobPosting',
  Skill: 'Skill',
  JobRequirement: 'JobRequirement',
  CandidateProfile: 'CandidateProfile',
  Resume: 'Resume',
  ParsedResumeSkill: 'ParsedResumeSkill',
  ResumeVsJdMatch: 'ResumeVsJdMatch',
  AiInterview: 'AiInterview',
  AiInterviewQuestion: 'AiInterviewQuestion',
  AiInterviewResponse: 'AiInterviewResponse',
  AiInterviewCheatingEvent: 'AiInterviewCheatingEvent',
  AiInterviewPostureData: 'AiInterviewPostureData',
  AiVoicePrompt: 'AiVoicePrompt',
  AiInterviewAnalysis: 'AiInterviewAnalysis',
  AiGenerationLog: 'AiGenerationLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
